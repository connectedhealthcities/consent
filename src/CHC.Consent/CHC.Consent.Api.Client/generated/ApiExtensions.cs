// <auto-generated>
// (C) 2018 CHC  License: TBC
// </auto-generated>

namespace CHC.Consent.Api.Client
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Api.
    /// </summary>
    public static partial class ApiExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='specification'>
            /// </param>
            public static object PutConsent(this IApi operations, ConsentSpecification specification = default(ConsentSpecification))
            {
                return operations.PutConsentAsync(specification).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='specification'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PutConsentAsync(this IApi operations, ConsentSpecification specification = default(ConsentSpecification), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PutConsentWithHttpMessagesAsync(specification, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void Get(this IApi operations, long id)
            {
                operations.GetAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetAsync(this IApi operations, long id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static IList<IdentifierValue> GetPerson(this IApi operations, long id)
            {
                return operations.GetPersonAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<IdentifierValue>> GetPersonAsync(this IApi operations, long id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPersonWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='match'>
            /// </param>
            public static SearchResult FindPerson(this IApi operations, IList<MatchSpecification> match)
            {
                return operations.FindPersonAsync(match).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='match'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SearchResult> FindPersonAsync(this IApi operations, IList<MatchSpecification> match, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FindPersonWithHttpMessagesAsync(match, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='specification'>
            /// </param>
            public static PersonCreatedResult PutPerson(this IApi operations, PersonSpecification specification)
            {
                return operations.PutPersonAsync(specification).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='specification'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PersonCreatedResult> PutPersonAsync(this IApi operations, PersonSpecification specification, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PutPersonWithHttpMessagesAsync(specification, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<IdentifierDefinition> IdentityStoreMetadata(this IApi operations)
            {
                return operations.IdentityStoreMetadataAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<IdentifierDefinition>> IdentityStoreMetadataAsync(this IApi operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.IdentityStoreMetadataWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='studyId'>
            /// </param>
            /// <param name='stubjectId'>
            /// </param>
            /// <param name='subjectIdentifier'>
            /// </param>
            public static StudySubject Get1(this IApi operations, long studyId, string stubjectId, string subjectIdentifier = default(string))
            {
                return operations.Get1Async(studyId, stubjectId, subjectIdentifier).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='studyId'>
            /// </param>
            /// <param name='stubjectId'>
            /// </param>
            /// <param name='subjectIdentifier'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StudySubject> Get1Async(this IApi operations, long studyId, string stubjectId, string subjectIdentifier = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Get1WithHttpMessagesAsync(studyId, stubjectId, subjectIdentifier, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='studyId'>
            /// </param>
            /// <param name='personId'>
            /// </param>
            public static StudySubject FindBySubjectId(this IApi operations, long studyId, long personId)
            {
                return operations.FindBySubjectIdAsync(studyId, personId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='studyId'>
            /// </param>
            /// <param name='personId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StudySubject> FindBySubjectIdAsync(this IApi operations, long studyId, long personId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FindBySubjectIdWithHttpMessagesAsync(studyId, personId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='studyId'>
            /// </param>
            public static string Generate(this IApi operations, long studyId)
            {
                return operations.GenerateAsync(studyId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='studyId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GenerateAsync(this IApi operations, long studyId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GenerateWithHttpMessagesAsync(studyId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
