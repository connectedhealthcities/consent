@page "{studyId:long}/subject/{subjectIdentifier}"
@using CHC.Consent.Common.Consent
@using CHC.Consent.Common.Identity.Identifiers
@using CHC.Consent.Common.Infrastructure
@using CHC.Consent.Common.Infrastructure.Definitions
@using CHC.Consent.Common.Infrastructure.Definitions.Types
@using Microsoft.AspNetCore.Html
@model Subject
@inject IdentifierDefinitionRegistry IdentifierDefinitionRegistry 

@functions
{

    Task<IHtmlContent> DisplayFormattedIdentifier(params string[] systemNames) => DisplayIdentifier(systemNames, false);

    Task<IHtmlContent> DisplayRawIdentifier(params string[] systemNames) => DisplayIdentifier(systemNames, true);

    private Task<IHtmlContent> DisplayIdentifier(string[] systemNames, bool raw)
    {
        var rootIdentifier = Model.GetIdentifier(systemNames.First());
        var identifier = rootIdentifier;
        var registry = (DefinitionRegistry) IdentifierDefinitionRegistry;
        foreach (var systemName in systemNames.Skip(1))
        {
            if (identifier == null) continue;
            registry = ((CompositeDefinitionType) identifier.Definition.Type).Identifiers;
            var compositeIdentifierValue = (identifier.Value as CompositeIdentifierValue<PersonIdentifier>);
            identifier = compositeIdentifierValue?.Identifiers.FirstOrDefault(_ => _.Definition.SystemName == systemName);
        }


        return Component.InvokeAsync("Identifier", new {identifier, registry, raw });
    }

    int? Age()
    {
        var dateOfBirthValue = Model.GetIdentifier("date-of-birth")?.Value;
        if (!(dateOfBirthValue?.Value is DateTime)) return null;

        var today = DateTime.Today;
        var dateOfBirth = (DateTime) dateOfBirthValue.Value;

        var years = today.Year - dateOfBirth.Year;
        if (today.Month <= dateOfBirth.Month && today.Day < dateOfBirth.Day)
            years -= 1;
        return years;
    }

    private static Evidence GetEvidence(IEnumerable<Evidence> evidence, string systemName)
    {
        return evidence?.FirstOrDefault(_ => _.Definition.SystemName == systemName);
    }

    private string Evidence(params string[] path)
    {
        if (Model.CurrentConsent == null) return null;
        var currentEvidence = path.Skip(1)
            .Aggregate(
                GetEvidence(Model.CurrentConsent.WithdrawnEvidence, path[0]),
                (current, definition) => 
                    GetEvidence((current?.Value as CompositeIdentifierValue<Evidence>)?.Identifiers, definition));
        return currentEvidence?.Value?.Value?.ToString();
    }

}

@section title{ @await  DisplayRawIdentifier("name") }

<div class="row" style="margin-top: 1em">

<div class="col-md-6">
    <table class="table table-sm table-striped table-borderless">
    
        <tr>
            <th>Participant</th>
            <td>@await DisplayFormattedIdentifier("name")</td>
        </tr>
        <tr>
            <th>Date Of Birth</th>
            <td>@await DisplayFormattedIdentifier("date-of-birth")</td>
        </tr>
        <tr>
            <th>First Line Of Address</th>
            <td>@await DisplayFormattedIdentifier("address", "line-1")</td>
        </tr>
        <tr>
            <th>Postcode</th>
            <td>@await DisplayFormattedIdentifier("address", "postcode")</td>
        </tr>
        <tr>
            <th>Age</th>
            <td>@Age()</td>
        </tr>
    
        @if (Model.ConsentIsActive)
        {
            <tr>
                <th>Consented Status</th>
                <td>Consented</td>
            </tr>
            <tr>
                <th>Withdrawal Requested By</th>
                <td></td>
            </tr>
            <tr>
                <th>Withdrawal Requested By</th>
                <td></td>
            </tr>
        }
        else
        {
            <tr>
                <th>Consented Status</th>
                <td>@(Model.CurrentConsent == null ? "Never consented" : "Withdrawn")</td>
            </tr>
            <tr>
                <th>Withdrawal Requested By</th>
                <td>@Evidence("bib4all-withdrawal-request", "requested-by")</td>
            </tr>
            <tr>
                <th>Relationship to Subject</th>
                <td>@Evidence("bib4all-withdrawal-request", "relationship-to-subject")</td>
            </tr>
        }
    </table>

</div>
@if(Model.ConsentIsActive) 
{
<div class="col-md-6">

    <p>Withdrawing a participant</p>
    <p>The boxes below must be complete to remove a participant from the study.</p>

    <form id="withdrawal-form" method="post" autocomplete="off" autocapitalize="off" >
        <div class="form-group">
            <label asp-for="Input.WithdrawnByName">Withdrawal requested by (Full Name)</label>
            <input asp-for="Input.WithdrawnByName" class="form-control form-control" />
            <span asp-validation-for="Input.WithdrawnByName" class="text-danger"></span>
        </div>
        <div class="form-group">
            <label asp-for="Input.WithdrawnByRelationship">Relationship to Participant</label>
            <input asp-for="Input.WithdrawnByRelationship" class="form-control form-control"/>
            <span asp-validation-for="Input.WithdrawnByRelationship" class="text-danger"></span>
        </div>
    
        <button type="submit" class="btn btn-sm">Withdraw participant from study</button>
    </form>
</div>
}
</div>


@section Scripts
{
    <script>
    jQuery(function($){
        var data = $('#withdrawal-form').data('validator');
        if(!data) return; 
        data.settings.submitHandler = function(form, event) {
            if(confirm('You are withdrawing a participant from a study')) {
                form.submit();
            }
        };
    });
    </script>
}
