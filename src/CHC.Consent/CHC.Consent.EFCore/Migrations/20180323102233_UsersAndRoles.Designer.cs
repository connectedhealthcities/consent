// <auto-generated />
using CHC.Consent.EFCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using System;

namespace CHC.Consent.EFCore.Migrations
{
    [DbContext(typeof(ConsentContext))]
    [Migration("20180323102233_UsersAndRoles")]
    partial class UsersAndRoles
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CHC.Consent.EFCore.Consent.CaseIdentifierEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("ConsentId");

                    b.Property<string>("Type")
                        .IsRequired();

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2147483647);

                    b.HasKey("Id");

                    b.HasIndex("ConsentId");

                    b.ToTable("CaseIdentifier");
                });

            modelBuilder.Entity("CHC.Consent.EFCore.Consent.ConsentEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateProvided");

                    b.Property<DateTime?>("DateWithdrawn");

                    b.Property<long>("GivenByPersonId");

                    b.Property<long>("StudySubjectId");

                    b.HasKey("Id");

                    b.HasIndex("GivenByPersonId");

                    b.HasIndex("StudySubjectId", "DateProvided", "DateWithdrawn")
                        .IsUnique()
                        .HasFilter("[DateWithdrawn] IS NOT NULL");

                    b.ToTable("Consent");
                });

            modelBuilder.Entity("CHC.Consent.EFCore.Consent.EvidenceEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("ConsentId");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Type")
                        .IsRequired();

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2147483647);

                    b.HasKey("Id");

                    b.HasIndex("ConsentId");

                    b.ToTable("Evidence");

                    b.HasDiscriminator<string>("Discriminator").HasValue("EvidenceEntity");
                });

            modelBuilder.Entity("CHC.Consent.EFCore.Consent.StudyEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Study");
                });

            modelBuilder.Entity("CHC.Consent.EFCore.Consent.StudySubjectEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("PersonId");

                    b.Property<long>("StudyId");

                    b.Property<string>("SubjectIdentifier")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("StudyId", "PersonId")
                        .IsUnique();

                    b.HasIndex("StudyId", "SubjectIdentifier")
                        .IsUnique();

                    b.ToTable("StudySubject");
                });

            modelBuilder.Entity("CHC.Consent.EFCore.Entities.PersonEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.HasKey("Id");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("CHC.Consent.EFCore.Entities.PersonIdentifierEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<DateTime?>("Deleted");

                    b.Property<long?>("PersonId")
                        .IsRequired();

                    b.Property<string>("TypeName")
                        .IsRequired();

                    b.Property<string>("Value")
                        .HasMaxLength(2147483647);

                    b.Property<string>("ValueType")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonIdentifier");
                });

            modelBuilder.Entity("CHC.Consent.EFCore.Entities.SubjectIdentifierEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CurrentValue");

                    b.Property<long>("StudyId");

                    b.HasKey("Id");

                    b.HasIndex("StudyId");

                    b.ToTable("SubjectIdentifiers");
                });

            modelBuilder.Entity("CHC.Consent.EFCore.Security.ConsentRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.Property<string>("ParentRoleId");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.HasIndex("ParentRoleId");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("CHC.Consent.EFCore.Security.ConsentUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CHC.Consent.EFCore.Consent.GivenEvidenceEntity", b =>
                {
                    b.HasBaseType("CHC.Consent.EFCore.Consent.EvidenceEntity");


                    b.ToTable("GivenEvidenceEntity");

                    b.HasDiscriminator().HasValue("Given");
                });

            modelBuilder.Entity("CHC.Consent.EFCore.Consent.WithdrawnEvidenceEntity", b =>
                {
                    b.HasBaseType("CHC.Consent.EFCore.Consent.EvidenceEntity");


                    b.ToTable("WithdrawnEvidenceEntity");

                    b.HasDiscriminator().HasValue("Withdrawn");
                });

            modelBuilder.Entity("CHC.Consent.EFCore.Consent.CaseIdentifierEntity", b =>
                {
                    b.HasOne("CHC.Consent.EFCore.Consent.ConsentEntity", "Consent")
                        .WithMany()
                        .HasForeignKey("ConsentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CHC.Consent.EFCore.Consent.ConsentEntity", b =>
                {
                    b.HasOne("CHC.Consent.EFCore.Entities.PersonEntity", "GivenBy")
                        .WithMany()
                        .HasForeignKey("GivenByPersonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CHC.Consent.EFCore.Consent.StudySubjectEntity", "StudySubject")
                        .WithMany()
                        .HasForeignKey("StudySubjectId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CHC.Consent.EFCore.Consent.EvidenceEntity", b =>
                {
                    b.HasOne("CHC.Consent.EFCore.Consent.ConsentEntity", "Consent")
                        .WithMany()
                        .HasForeignKey("ConsentId");
                });

            modelBuilder.Entity("CHC.Consent.EFCore.Consent.StudySubjectEntity", b =>
                {
                    b.HasOne("CHC.Consent.EFCore.Entities.PersonEntity", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CHC.Consent.EFCore.Consent.StudyEntity", "Study")
                        .WithMany()
                        .HasForeignKey("StudyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CHC.Consent.EFCore.Entities.PersonIdentifierEntity", b =>
                {
                    b.HasOne("CHC.Consent.EFCore.Entities.PersonEntity", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CHC.Consent.EFCore.Entities.SubjectIdentifierEntity", b =>
                {
                    b.HasOne("CHC.Consent.EFCore.Consent.StudyEntity")
                        .WithMany()
                        .HasForeignKey("StudyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CHC.Consent.EFCore.Security.ConsentRole", b =>
                {
                    b.HasOne("CHC.Consent.EFCore.Security.ConsentRole", "ParentRole")
                        .WithMany()
                        .HasForeignKey("ParentRoleId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("CHC.Consent.EFCore.Security.ConsentRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CHC.Consent.EFCore.Security.ConsentUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CHC.Consent.EFCore.Security.ConsentUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("CHC.Consent.EFCore.Security.ConsentRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CHC.Consent.EFCore.Security.ConsentUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CHC.Consent.EFCore.Security.ConsentUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
